import EEObject from "grimoirejs/lib/Base/EEObject";
/**
 * Provides managing all promise on initializing resources.
 */
class AssetLoader extends EEObject {
    constructor(...args) {
        super(...args);
        /**
         * Promise count registered.
         * @type {number}
         */
        this.registerCount = 0;
        /**
         * Promise count finished successfully.
         * @type {number}
         */
        this.loadCount = 0;
        /**
         * Promise count completed(success and errored)
         * @type {number}
         */
        this.completeCount = 0;
        /**
         * Promise count errored
         * @type {number}
         */
        this.errorCount = 0;
        /**
         * Main promise to provide tasks for waiting for all resource loading.
         * @type {Promise<void>}
         */
        this.promise = new Promise((resolve) => { this._resolve = resolve; });
    }
    /**
     * Register an promise to be waited until finished.
     */
    register(promise) {
        this.registerCount++;
        return new Promise((resolve, reject) => {
            (function () {
                return __awaiter(this, void 0, void 0, function* () {
                    try {
                        resolve(yield promise);
                        this.loadCount++;
                    }
                    catch (e) {
                        reject(e);
                        this.errorCount++;
                    }
                    this.completeCount++;
                    this._checkLoadCompleted();
                });
            }).bind(this)();
        });
    }
    /**
     * Verify all promises are completed.
     */
    _checkLoadCompleted() {
        this.emit("progress", this);
        if (this.registerCount === this.completeCount) {
            this._resolve();
        }
    }
}
export default AssetLoader;
//# sourceMappingURL=AssetLoader.js.map