/**
 * Resolve resources with caching.
 */
export default class CacheResolver {
    constructor(toAbsolute) {
        this.toAbsolute = toAbsolute;
        this.cache = {};
        this.resolvers = {};
    }
    resolve(src, resolver) {
        return __awaiter(this, void 0, void 0, function* () {
            const abs = this.toAbsolute(src);
            if (this._cached(abs)) {
                return this.cache[abs];
            }
            else if (this._resolving(abs)) {
                return yield this.resolvers[abs];
            }
            else {
                this.resolvers[abs] = resolver(abs);
                const result = yield this.resolvers[abs];
                this._resolved(abs, result);
                return result;
            }
        });
    }
    _cached(abs) {
        return typeof this.cache[abs] !== "undefined";
    }
    _resolving(abs) {
        return typeof this.resolvers[abs] !== "undefined";
    }
    _resolved(abs, result) {
        delete this.resolvers[abs];
        this.cache[abs] = result;
    }
}
//# sourceMappingURL=CacheResolver.js.map