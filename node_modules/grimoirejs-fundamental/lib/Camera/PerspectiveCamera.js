import { Vector3, Vector4, Matrix } from "grimoirejs-math";
import { mat4, vec3, vec4 } from "gl-matrix";
/**
 * Provides perspective camera as implementation of ICamera.
 */
export default class PerspectiveCamera {
    constructor() {
        this._viewMatrix = new Matrix();
        this._invViewMatrix = new Matrix();
        this._projectionMatrix = new Matrix();
        this._invProjectionMatrix = new Matrix();
        this._projectionViewMatrix = new Matrix();
        this._invProjectionViewMatrix = new Matrix();
        this._eyeCache = Vector3.Zero;
        this._lookAtCache = Vector3.Zero;
        this._upCache = Vector3.Zero;
    }
    getViewMatrix() {
        return this._viewMatrix;
    }
    getInvViewMatrix() {
        return null; // TODO
    }
    getProjectionMatrix() {
        return this._projectionMatrix;
    }
    getInvProjectionMatrix() {
        return null; // TODO
    }
    getProjectionViewMatrix() {
        return this._projectionViewMatrix;
    }
    getInvProjectionViewMatrix() {
        return null; // TODO
    }
    getFar() {
        return this._far;
    }
    setFar(far) {
        this._far = far;
        this._recalculateProjection();
    }
    getNear() {
        return this._near;
    }
    setNear(near) {
        this._near = near;
        this._recalculateProjection();
    }
    getAspect() {
        return this._aspect;
    }
    setAspect(aspect) {
        this._aspect = aspect;
        this._recalculateProjection();
    }
    getFovy() {
        return this._fovy;
    }
    setFovy(fov) {
        this._fovy = fov;
        this._recalculateProjection();
    }
    updateTransform(transform) {
        vec3.transformMat4(this._eyeCache.rawElements, Vector3.Zero.rawElements, transform.globalTransform.rawElements);
        vec4.transformMat4(this._lookAtCache.rawElements, PerspectiveCamera._frontOrigin.rawElements, transform.globalTransform.rawElements);
        vec3.add(this._lookAtCache.rawElements, this._lookAtCache.rawElements, this._eyeCache.rawElements);
        vec4.transformMat4(this._upCache.rawElements, PerspectiveCamera._upOrigin.rawElements, transform.globalTransform.rawElements);
        mat4.lookAt(this._viewMatrix.rawElements, this._eyeCache.rawElements, this._lookAtCache.rawElements, this._upCache.rawElements);
        mat4.mul(this._projectionViewMatrix.rawElements, this._projectionMatrix.rawElements, this._viewMatrix.rawElements);
    }
    _recalculateProjection() {
        mat4.perspective(this._projectionMatrix.rawElements, this._fovy, this._aspect, this._near, this._far);
        mat4.mul(this._projectionViewMatrix.rawElements, this._projectionMatrix.rawElements, this._viewMatrix.rawElements);
    }
}
PerspectiveCamera._frontOrigin = new Vector4(0, 0, -1, 0);
PerspectiveCamera._upOrigin = new Vector4(0, 1, 0, 0);
//# sourceMappingURL=PerspectiveCamera.js.map