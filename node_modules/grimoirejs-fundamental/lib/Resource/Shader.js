import ResourceBase from "./ResourceBase";
export default class Shader extends ResourceBase {
    constructor(gl, type, sourceCode) {
        super(gl);
        this.type = type;
        this.sourceCode = sourceCode;
        this.shader = gl.createShader(type);
        if (sourceCode) {
            this.update(sourceCode);
        }
    }
    update(source) {
        this.gl.shaderSource(this.shader, source);
        this.gl.compileShader(this.shader);
        if (!this.gl.getShaderParameter(this.shader, WebGLRenderingContext.COMPILE_STATUS)) {
            throw new Error(`Compiling shader failed.\nSourceCode:\n${this.sourceCode}\n\nErrorCode:${this.gl.getShaderInfoLog(this.shader)}`);
        }
        this.valid = true;
    }
    destroy() {
        super.destroy();
        this.gl.deleteShader(this.shader);
    }
}
//# sourceMappingURL=Shader.js.map