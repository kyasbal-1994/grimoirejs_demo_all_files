import UniformProxy from "./UniformProxy";
import ResourceBase from "./ResourceBase";
export default class Program extends ResourceBase {
    constructor(gl) {
        super(gl);
        this._uniformLocations = {};
        this._attributeLocations = {};
        this.uniforms = new UniformProxy(this);
        this.program = gl.createProgram();
    }
    update(shaders) {
        if (this.valid) {
            // detach all attached shaders previously
            const preciousShaders = this.gl.getAttachedShaders(this.program);
            preciousShaders.forEach(s => this.gl.detachShader(this.program, s));
        }
        shaders.forEach(shader => {
            this.gl.attachShader(this.program, shader.shader);
        });
        this.gl.linkProgram(this.program);
        if (!this.gl.getProgramParameter(this.program, WebGLRenderingContext.LINK_STATUS)) {
            const errorLog = this.gl.getProgramInfoLog(this.program);
            throw new Error(`LINK FAILED\n${errorLog}`);
        }
        this.valid = true;
    }
    use() {
        this.gl.useProgram(this.program);
        this.uniforms.onUse();
    }
    destroy() {
        super.destroy();
        this.gl.deleteProgram(this.program);
    }
    findAttributeLocation(variableName) {
        if (typeof this._attributeLocations[variableName] === "undefined") {
            this._attributeLocations[variableName] = this.gl.getAttribLocation(this.program, variableName);
            this.gl.enableVertexAttribArray(this._attributeLocations[variableName]);
            return this._attributeLocations[variableName];
        }
        else {
            return this._attributeLocations[variableName];
        }
    }
    findUniformLocation(variableName) {
        if (typeof this._uniformLocations[variableName] === "undefined") {
            return this._uniformLocations[variableName] = this.gl.getUniformLocation(this.program, variableName);
        }
        else {
            return this._uniformLocations[variableName];
        }
    }
}
//# sourceMappingURL=Program.js.map