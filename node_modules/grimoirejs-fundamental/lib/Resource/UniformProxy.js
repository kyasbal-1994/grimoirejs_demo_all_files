export default class UniformProxy {
    constructor(program) {
        this.program = program;
        this._currentTextureRegister = 0;
        this._gl = program.gl;
    }
    uniformBool(variableName, val) {
        const location = this.program.findUniformLocation(variableName);
        if (location) {
            this._gl.uniform1i(location, val ? 1 : 0);
        }
    }
    uniformMatrix(variableName, mat) {
        const location = this.program.findUniformLocation(variableName);
        if (location) {
            this._gl.uniformMatrix4fv(location, false, mat.rawElements);
        }
    }
    uniformFloat(variableName, val) {
        const location = this.program.findUniformLocation(variableName);
        if (location) {
            this._gl.uniform1f(location, val);
        }
    }
    uniformFloatArray(variableName, val) {
        const location = this.program.findUniformLocation(variableName);
        if (location) {
            this._gl.uniform1fv(location, val);
        }
    }
    uniformInt(variableName, val) {
        const location = this.program.findUniformLocation(variableName);
        if (location) {
            this._gl.uniform1i(location, val);
        }
    }
    uniformVector2(variableName, val) {
        const location = this.program.findUniformLocation(variableName);
        if (location) {
            this._gl.uniform2f(location, val.X, val.Y);
        }
    }
    uniformVector3(variableName, val) {
        const location = this.program.findUniformLocation(variableName);
        if (location) {
            this._gl.uniform3f(location, val.X, val.Y, val.Z);
        }
    }
    uniformColor3(variableName, val) {
        const location = this.program.findUniformLocation(variableName);
        if (location) {
            this._gl.uniform3f(location, val.R, val.G, val.B);
        }
    }
    uniformVector4(variableName, val) {
        const location = this.program.findUniformLocation(variableName);
        if (location) {
            this._gl.uniform4f(location, val.X, val.Y, val.Z, val.W);
        }
    }
    uniformColor4(variableName, val) {
        const location = this.program.findUniformLocation(variableName);
        if (location) {
            this._gl.uniform4f(location, val.R, val.G, val.B, val.A);
        }
    }
    uniformTexture2D(variableName, val) {
        if (val.valid) {
            val.register(this._currentTextureRegister);
            this.uniformInt(variableName, this._currentTextureRegister);
            this._currentTextureRegister++;
        }
        else {
            console.warn(`The texture assigned to '${variableName}' is not valid.`);
        }
    }
    onUse() {
        this._currentTextureRegister = 0;
    }
}
//# sourceMappingURL=UniformProxy.js.map