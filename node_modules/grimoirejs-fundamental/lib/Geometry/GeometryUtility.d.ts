import { Vector3 } from "grimoirejs-math";
export default class GeometryUtility {
    /**
     * Generateor wrap for array
     * @param  {number[]}                 array [description]
     * @return {IterableIterator<number>}       [description]
     */
    static fromArray(array: number[]): IterableIterator<number>;
    /**
     * Convert triangles topology to lines. Basically uses for making wireframes.
     * @param  {IterableIterator<number>} indicies [description]
     * @return {IterableIterator<number>}          [description]
     */
    static linesFromTriangles(indicies: IterableIterator<number>): IterableIterator<number>;
    /**
     * Generator for ellipse positions
     * @param  {Vector3}                  center [the center position of ellipse]
     * @param  {Vector3}                  up     [up vector for ellipse]
     * @param  {Vector3}                  right  [right vector for ellipse]
     * @param  {number}                   divide [how many triangles should consists in the ellipse]
     * @return {IterableIterator<number>}        [Generated iterator for position]
     */
    static ellipsePosition(center: Vector3, up: Vector3, right: Vector3, divide: number): IterableIterator<number>;
    static ellipseIndex(offset: number, divide: number): IterableIterator<number>;
    static ellipseSize(divide: number): number;
    static cubePosition(center: Vector3, up: Vector3, right: Vector3, forward: Vector3): IterableIterator<number>;
    static quadPosition(center: Vector3, up: Vector3, right: Vector3): IterableIterator<number>;
    static spherePosition(center: Vector3, up: Vector3, right: Vector3, forward: Vector3, rowDiv: number, circleDiv: number): IterableIterator<number>;
    static quadIndex(offset: number): IterableIterator<number>;
    static cubeIndex(offset: number): IterableIterator<number>;
    static sphereIndex(offset: number, rowDiv: number, circleDiv: number): IterableIterator<number>;
    static quadSize(): number;
    static cubeSize(): number;
    static sphereSize(rowDiv: number, circleDiv: number): number;
}
