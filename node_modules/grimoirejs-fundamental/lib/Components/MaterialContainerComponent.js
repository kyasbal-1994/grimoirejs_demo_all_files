import SORTPass from "../Material/SORTPass";
import Component from "grimoirejs/lib/Node/Component";
export default class MaterialContainerComponent extends Component {
    constructor(...args) {
        super(...args);
        this.materialArgs = {};
        this.ready = false;
    }
    $mount() {
        this.attributes.get("material").addObserver(this._onMaterialChanged);
        this.companion.get("loader").register(this._onMaterialChanged());
    }
    /**
     * When the material attribute is changed.
     */
    _onMaterialChanged() {
        return __awaiter(this, void 0, void 0, function* () {
            const materialPromise = this.getValue("material");
            if (!this._materialComponent) {
                this._prepareInternalMaterial(materialPromise);
            }
            else {
                this._prepareExternalMaterial(materialPromise);
            }
        });
    }
    /**
     * Resolve materials only when the material required from external material component.
     * @return {Promise<void>} [description]
     */
    _prepareExternalMaterial(materialPromise) {
        return __awaiter(this, void 0, void 0, function* () {
            const loader = this.companion.get("loader");
            loader.register(materialPromise);
            const material = yield materialPromise;
            this.material = material;
            this.materialArgs = this._materialComponent.materialArgs;
            this.ready = true;
        });
    }
    _prepareInternalMaterial(materialPromise) {
        return __awaiter(this, void 0, void 0, function* () {
            // obtain promise of instanciating material
            const loader = this.companion.get("loader");
            loader.register(materialPromise);
            if (!materialPromise) {
                return;
            }
            const material = yield materialPromise;
            const promises = [];
            material.pass.forEach((p) => {
                if (p instanceof SORTPass) {
                    for (let key in p.programInfo.gomlAttributes) {
                        const val = p.programInfo.gomlAttributes[key];
                        this.__addAtribute(key, val);
                        this.attributes.get(key).addObserver((v) => {
                            this.materialArgs[key] = v.Value;
                        });
                        this.materialArgs[key] = this.getValue(key);
                    }
                }
            });
            yield Promise.all(promises);
            this.material = material;
            this.ready = true;
        });
    }
}
MaterialContainerComponent.attributes = {
    material: {
        converter: "Material",
        defaultValue: undefined,
        componentBoundTo: "_materialComponent" // When the material was specified with the other material tag, this field would be assigned.
    }
};
//# sourceMappingURL=MaterialContainerComponent.js.map