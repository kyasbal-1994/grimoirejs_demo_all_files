import PerspectiveCamera from "../Camera/PerspectiveCamera";
import Component from "grimoirejs/lib/Node/Component";
export default class CameraComponent extends Component {
    /**
   * Find scene tag recursively.
   * @param  {GomlNode}       node [the node to searching currently]
   * @return {SceneComponent}      [the scene component found]
   */
    static _findContainedScene(node) {
        if (node.parent) {
            const scene = node.parent.getComponent("Scene");
            if (!scene) {
                return CameraComponent._findContainedScene(node.parent);
            }
            else {
                return scene;
            }
        }
        else {
            return null;
        }
    }
    $awake() {
        this.containedScene = CameraComponent._findContainedScene(this.node);
        const c = this.camera = new PerspectiveCamera();
        const t = this.node.getComponent("Transform");
        this.$transformUpdated(t);
        c.setFar(this.attributes.get("far").Value);
        c.setNear(this.attributes.get("near").Value);
        c.setFovy(this.attributes.get("fovy").Value);
        c.setAspect(this.attributes.get("aspect").Value);
    }
    $renderScene(args) {
        if (this.containedScene) {
            this.containedScene.node.broadcastMessage("update");
            this.containedScene.node.broadcastMessage("render", args);
        }
    }
    $transformUpdated(t) {
        if (this.camera) {
            this.camera.updateTransform(t);
        }
    }
}
CameraComponent.attributes = {
    fovy: {
        defaultValue: 0.3,
        converter: "Number"
    },
    near: {
        defaultValue: 0.01,
        converter: "Number"
    },
    far: {
        defaultValue: 10,
        converter: "Number"
    },
    aspect: {
        defaultValue: 1.6,
        converter: "Number"
    }
};
//# sourceMappingURL=CameraComponent.js.map