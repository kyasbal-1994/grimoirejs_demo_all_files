import GLExtRequestor from "../Resource/GLExtRequestor";
import Component from "grimoirejs/lib/Node/Component";
import gr from "grimoirejs";
const ns = gr.ns("HTTP://GRIMOIRE.GL/NS/DEFAULT");
class CanvasInitializerComponent extends Component {
    $awake() {
        this._scriptTag = this.companion.get("scriptElement");
        if (this._isContainedInBody(this._scriptTag)) {
            // canvas should be placed siblings of the script tag
            this._generateCanvas(this._scriptTag);
        }
        else {
        }
        // apply sizes on changed
        this.attributes.get("width").addObserver((v) => {
            this.canvas.width = v.Value;
        });
        this.attributes.get("height").addObserver((v) => {
            this.canvas.height = v.Value;
        });
    }
    /**
     * Generate canvas element
     * @param  {Element}           parent [description]
     * @return {HTMLCanvasElement}        [description]
     */
    _generateCanvas(scriptTag) {
        const generatedCanvas = document.createElement("canvas");
        generatedCanvas.width = this.attributes.get("width").Value;
        generatedCanvas.height = this.attributes.get("height").Value;
        const gl = this._getContext(generatedCanvas);
        this.companion.set(ns("gl"), gl);
        this.companion.set(ns("canvasElement"), generatedCanvas);
        this.companion.set(ns("GLExtRequestor"), new GLExtRequestor(gl));
        scriptTag.parentElement.insertBefore(generatedCanvas, scriptTag.nextSibling);
        this.canvas = generatedCanvas;
        return generatedCanvas;
    }
    _getContext(canvas) {
        let context = canvas.getContext("webgl");
        if (!context) {
            context = canvas.getContext("webgl-experimental");
        }
        return context;
    }
    /**
     * Check the tag is included in the body
     * @param  {Element} tag [description]
     * @return {boolean}     [description]
     */
    _isContainedInBody(tag) {
        if (!tag.parentElement) {
            return false;
        }
        if (tag.parentNode.nodeName === "BODY") {
            return true;
        }
        return this._isContainedInBody(tag.parentElement);
    }
}
CanvasInitializerComponent.attributes = {
    width: {
        defaultValue: 640,
        converter: "Number"
    },
    height: {
        defaultValue: 480,
        converter: "Number"
    }
};
export default CanvasInitializerComponent;
//# sourceMappingURL=CanvasInitializerComponent.js.map