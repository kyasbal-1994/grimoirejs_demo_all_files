import Framebuffer from "../Resource/FrameBuffer";
import Component from "grimoirejs/lib/Node/Component";
export default class RenderQuadComponent extends Component {
    $awake() {
        this.getAttribute("targetBuffer").boundTo("_targetBuffer");
        this.getAttribute("clearColor").boundTo("_clearColor");
        this.getAttribute("clearColorEnabled").boundTo("_clearColorEnabled");
        this.getAttribute("clearDepthEnabled").boundTo("_clearDepthEnabled");
        this.getAttribute("clearDepth").boundTo("_clearDepth");
    }
    $mount() {
        this._gl = this.companion.get("gl");
        this._canvas = this.companion.get("canvasElement");
        const gr = this.companion.get("GeometryRegistory");
        this._geom = gr.getGeometry("quad");
        this._materialContainer = this.node.getComponent("MaterialContainer");
    }
    $bufferUpdated(args) {
        const out = this.getValue("out");
        if (out !== "default") {
            this._fbo = new Framebuffer(this.companion.get("gl"));
            this._fbo.update(args.buffers[out]);
        }
        const depthBuffer = this.getValue("depthBuffer");
        if (depthBuffer && this._fbo) {
            this._fbo.update(args.buffers[depthBuffer]);
        }
    }
    $render(args) {
        if (!this._materialContainer.ready) {
            return;
        }
        // bound render target
        if (this._fbo) {
            this._fbo.bind();
            this._gl.viewport(0, 0, args.viewport.Width, args.viewport.Height);
        }
        else {
            this._gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null);
            this._gl.viewport(args.viewport.Left, this._canvas.height - args.viewport.Bottom, args.viewport.Width, args.viewport.Height);
        }
        // clear buffer if needed
        if (this._fbo && this._clearColorEnabled) {
            this._gl.clearColor(this._clearColor.R, this._clearColor.G, this._clearColor.B, this._clearColor.A);
            this._gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT);
        }
        if (this._clearDepthEnabled) {
            this._gl.clearDepth(this._clearDepth);
            this._gl.clear(WebGLRenderingContext.DEPTH_BUFFER_BIT);
        }
        // make rendering argument
        const renderArgs = {
            targetBuffer: this._targetBuffer,
            geometry: this._geom,
            attributeValues: {},
            camera: args.camera.camera,
            transform: null,
            buffers: args.buffers,
            viewport: args.viewport
        };
        renderArgs.attributeValues = this._materialContainer.materialArgs;
        // do render
        this._materialContainer.material.draw(renderArgs);
        this._gl.flush();
    }
}
RenderQuadComponent.attributes = {
    out: {
        defaultValue: "default",
        converter: "String"
    },
    depthBuffer: {
        defaultValue: undefined,
        converter: "String"
    },
    targetBuffer: {
        defaultValue: "default",
        converter: "String",
    },
    clearColor: {
        defaultValue: "#0000",
        converter: "Color4",
    },
    clearColorEnabled: {
        defaultValue: true,
        converter: "Boolean",
    },
    clearDepthEnabled: {
        defaultValue: true,
        converter: "Boolean",
    },
    clearDepth: {
        defaultValue: 1.0,
        converter: "Number",
    }
};
//# sourceMappingURL=RenderQuadComponent.js.map