import { Matrix, Vector3, Quaternion } from "grimoirejs-math";
import ICamera from "../Camera/ICamera";
import Component from "grimoirejs/lib/Node/Component";
import IAttributeDeclaration from "grimoirejs/lib/Node/IAttributeDeclaration";
/**
 * Provides object transformation like translation,rotation,scaling.
 */
export default class TransformComponent extends Component {
    static attributes: {
        [key: string]: IAttributeDeclaration;
    };
    /**
     * Source vector to be multiplied with global transform to calculate forward direction of attached object.
     */
    private static _forwardBase;
    /**
     * Source vector to be multiplied with global transform to calculate up direction of attached object.
     */
    private static _upBase;
    /**
     * Source vector to be multiplied with global transform to calculate right direction of attached object.
     */
    private static _rightBase;
    /**
     * Local transform matrix representing scaling,rotation and translation of attached object.
     * @return {[type]} [description]
     */
    localTransform: Matrix;
    /**
     * Global transform that consider parent transform and local transform
     * @return {[type]} [description]
     */
    globalTransform: Matrix;
    /**
     * The children transform should be notified when this transform was updated.
     * @type {TransformComponent[]}
     */
    private _children;
    /**
     * The reference to parent TransformComponent.
     * When this object is root object of contained scene, this value should be null.
     * @type {TransformComponent}
     */
    private _parentTransform;
    /**
     * Calculation cache to
     * @return {[type]} [description]
     */
    private _cachePVM;
    /**
     * Cache for position
     * @type {Vector3}
     */
    private _position;
    /**
     * Cache for rotation
     * @type {Quaternion}
     */
    private _rotation;
    /**
     * Cache for scaling
     * @type {Vector3}
     */
    private _scale;
    /**
     * Cache of forward direction of this object
     */
    private _forward;
    /**
     * Cache of up direction of this object.
     */
    private _up;
    /**
     * Cache of right direction of this object.
     */
    private _right;
    position: Vector3;
    rotation: Quaternion;
    scale: Vector3;
    readonly forward: Vector3;
    readonly up: Vector3;
    readonly right: Vector3;
    calcPVW(camera: ICamera): Matrix;
    $awake(): void;
    $mount(): void;
    $unmount(): void;
    /**
     * update local transform and global transform.
     * This need to be called if you manually edit raw elements of scale,position or rotation to recalculate transform matricies.
     */
    updateTransform(): void;
    /**
     * Update global transoform.
     */
    updateGlobalTransform(): void;
    private _updateDirections();
}
