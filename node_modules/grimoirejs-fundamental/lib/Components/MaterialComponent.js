import SORTPass from "../Material/SORTPass";
import Component from "grimoirejs/lib/Node/Component";
import ResourceBase from "../Resource/ResourceBase";
export default class MaterialComponent extends Component {
    constructor(...args) {
        super(...args);
        this.materialArgs = {};
    }
    $mount() {
        const typeName = this.getValue("type");
        if (typeName) {
            this.materialPromise = this.companion.get("MaterialFactory").instanciate(typeName);
            this._registerAttributes();
        }
    }
    _registerAttributes() {
        return __awaiter(this, void 0, void 0, function* () {
            this.material = yield this.materialPromise;
            const promises = [];
            this.material.pass.forEach(p => {
                if (p instanceof SORTPass) {
                    for (let key in p.programInfo.gomlAttributes) {
                        this.__addAtribute(key, p.programInfo.gomlAttributes[key]);
                        this.attributes.get(key).addObserver((v) => {
                            this.materialArgs[key] = v.Value;
                        });
                        const value = this.materialArgs[key] = this.getValue(key);
                        if (value instanceof ResourceBase) {
                            promises.push(value.validPromise);
                        }
                    }
                }
            });
            yield Promise.all(promises);
            this.ready = true;
        });
    }
}
MaterialComponent.attributes = {
    type: {
        converter: "String",
        defaultValue: undefined
    }
};
//# sourceMappingURL=MaterialComponent.js.map