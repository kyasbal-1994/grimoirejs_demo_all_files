import PassFactory from "./PassFactory";
import TextFileResolver from "../Asset/TextFileResolver";
import Material from "./Material";
/**
 * Manage factories for materials.
 * Materials can be instanciated with this instance.
 */
export default class MaterialFactory {
    constructor(gl) {
        this.gl = gl;
    }
    static addMaterialType(typeName, factory) {
        MaterialFactory.factories[typeName] = factory;
        if (MaterialFactory.registerdHandlers[typeName]) {
            MaterialFactory.registerdHandlers[typeName].forEach((t) => t());
        }
    }
    static addSORTMaterial(typeName, source) {
        return __awaiter(this, void 0, void 0, function* () {
            const sortInfos = yield PassFactory.passInfoFromSORT(source);
            MaterialFactory.addMaterialType(typeName, (gl) => {
                const sorts = sortInfos.map(p => PassFactory.fromSORTPassInfo(gl, p));
                return new Material(sorts);
            });
        });
    }
    static addSORTMaterialFromURL(typeName, url) {
        return __awaiter(this, void 0, void 0, function* () {
            const source = yield TextFileResolver.resolve(url);
            yield MaterialFactory.addSORTMaterial(typeName, source);
        });
    }
    static _onRegister(factoryName, handler) {
        if (MaterialFactory.registerdHandlers[factoryName]) {
            MaterialFactory.registerdHandlers[factoryName].push(handler);
        }
        else {
            MaterialFactory.registerdHandlers[factoryName] = [handler];
        }
    }
    instanciate(typeName) {
        return __awaiter(this, void 0, void 0, function* () {
            if (MaterialFactory.factories[typeName]) {
                return MaterialFactory.factories[typeName](this.gl);
            }
            else {
                return yield this._waitForRegistered(typeName);
            }
        });
    }
    _waitForRegistered(typeName) {
        return new Promise((resolve) => {
            MaterialFactory._onRegister(typeName, () => {
                resolve(MaterialFactory.factories[typeName](this.gl));
            });
        });
    }
}
MaterialFactory.factories = {};
MaterialFactory.registerdHandlers = {};
//# sourceMappingURL=MaterialFactory.js.map