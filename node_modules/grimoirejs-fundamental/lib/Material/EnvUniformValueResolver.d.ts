import IMaterialArgument from "./IMaterialArgument";
import UniformProxy from "../Resource/UniformProxy";
import IVariableInfo from "./IVariableInfo";
/**
 * Environment uniform value resolver
 */
export default class EnvUniformValueResolver {
    /**
     * Static environment uniform value resolvers which names are already known.
     * @type {IVariableInfo}
     */
    static resolvers: {
        [key: string]: (valInfo: IVariableInfo, name: string) => ((proxy: UniformProxy, args: IMaterialArgument) => void);
    };
    /**
     * Dynamic environment uniform value resolvers which names are not known yet.
     * @type {IVariableInfo}
     */
    static dynamicResolvers: ((valInfo: IVariableInfo, name: string) => ((proxy: UniformProxy, args: IMaterialArgument) => void))[];
    /**
     * Add static environment uniform value resolver to specified name.
     * @param  {string} name     [description]
     * @param  {string} resolver [description]
     * @return {[type]}          [description]
     */
    static addResolver(name: string, resolver: (valInfo: IVariableInfo, name: string) => ((proxy: UniformProxy, args: IMaterialArgument) => void)): void;
    /**
     * Add dynamic environment uniform value resolver.
     * When pasased variable are not resolved by a resolver, that resolver should return null or undefined.
     * @param  {string} resolver [description]
     * @return {[type]}          [description]
     */
    static addDynamicResolver(resolver: (valInfo: IVariableInfo, name: string) => ((proxy: UniformProxy, args: IMaterialArgument) => void)): void;
    static resolve(name: string, valInfo: IVariableInfo): ((proxy: UniformProxy, args: IMaterialArgument) => void);
}
