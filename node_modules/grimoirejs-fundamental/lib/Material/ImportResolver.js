import CacheResolver from "../Asset/CacheResolver";
export class ImportResolver extends CacheResolver {
    constructor() {
        super((str) => {
            const regex = /^https?:\/\/.*/gm;
            return regex.test(str) ? ImportResolver._toAbsolute(str) : str;
        });
        this.staticImports = {};
    }
    static _toAbsolute(href) {
        const link = document.createElement("a");
        link.href = href;
        return (link.protocol + "//" + link.host + link.pathname + link.search + link.hash);
    }
    resolve(path) {
        return super.resolve(path, (abs) => {
            return this._resolve(path);
        });
    }
    _resolve(path) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.staticImports[path]) {
                return this.staticImports[path];
            }
            else {
                return yield this._fromExternal(path);
            }
        });
    }
    _fromExternal(path) {
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            xhr.open("GET", path);
            xhr.onload = (v) => {
                resolve(xhr.responseText);
            };
            xhr.onerror = (e) => {
                reject(e);
            };
            xhr.send();
        });
    }
}
export default new ImportResolver();
//# sourceMappingURL=ImportResolver.js.map