function _removeLineComment(source) {
    let text = source;
    const regex = /(\/\/.*)/g;
    while (true) {
        const found = regex.exec(text);
        if (!found) {
            break;
        }
        let beginPoint = found.index;
        text = text.substr(0, beginPoint) + text.substring(beginPoint + found[0].length, text.length);
    }
    return text;
}
function _removeMultiLineComment(source) {
    while (true) {
        const found = source.indexOf("/*", 0);
        if (found < 0) {
            break; // When there was no more found
        }
        let beginPoint = found;
        const endPoint = source.indexOf("*/", beginPoint);
        if (endPoint < 1) {
            // error no bracket matching
            console.error("Invalid bracket matching!");
            return source;
        }
        source = source.substr(0, beginPoint) + source.substring(endPoint + 2, source.length);
    }
    return source;
}
export default function (input) {
    return __awaiter(this, void 0, void 0, function* () {
        input.transforming = _removeMultiLineComment(input.transforming);
        input.transforming = _removeLineComment(input.transforming);
        return input;
    });
}
//# sourceMappingURL=CommentRemover.js.map