"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Vector = require("./Vector3");

var _Vector2 = _interopRequireDefault(_Vector);

var _glMatrix = require("gl-matrix");

var _AABB = require("./AABB");

var _AABB2 = _interopRequireDefault(_AABB);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PointList = function () {
    function PointList(pointList) {
        _classCallCheck(this, PointList);

        if (pointList) {
            this.points = new Array(pointList.points.length);
            for (var i = 0; i < pointList.points.length; i++) {
                this.points[i] = _Vector2.default.copy(pointList.points[i]);
            }
        } else {
            this.points = [];
        }
    }

    _createClass(PointList, [{
        key: "addPoint",
        value: function addPoint(point) {
            this.points.push(point);
        }
    }, {
        key: "transform",
        value: function transform(transformMatrix) {
            for (var i = 0; i < this.points.length; i++) {
                _glMatrix.vec3.transformMat4(this.points[i].rawElements, this.points[i].rawElements, transformMatrix.rawElements);
            }
            return;
        }
    }, {
        key: "clear",
        value: function clear() {
            this.points.length = 0;
            return;
        }
    }, {
        key: "getBoundingBox",
        value: function getBoundingBox() {
            var aabb = new _AABB2.default();
            for (var i = 0; i < this.points.length; i++) {
                aabb.expandAABB(this.points[i]);
            }
            return aabb;
        }
    }, {
        key: "toMathematicaPoints",
        value: function toMathematicaPoints() {
            var points = "";
            for (var i = 0; i < this.points.length; i++) {
                if (i !== 0) {
                    points += ",";
                }
                points += this.points[i].toMathematicaString();
            }
            return "Point[{" + points + "}]";
        }
    }], [{
        key: "initializeWithCube",
        value: function initializeWithCube(list) {
            list.clear();
            list.addPoint(new _Vector2.default(-1.0, +1.0, -1.0));
            list.addPoint(new _Vector2.default(-1.0, -1.0, -1.0));
            list.addPoint(new _Vector2.default(+1.0, -1.0, -1.0));
            list.addPoint(new _Vector2.default(+1.0, +1.0, -1.0));
            list.addPoint(new _Vector2.default(-1.0, +1.0, +1.0));
            list.addPoint(new _Vector2.default(-1.0, -1.0, +1.0));
            list.addPoint(new _Vector2.default(+1.0, -1.0, +1.0));
            list.addPoint(new _Vector2.default(+1.0, +1.0, +1.0));
            return list;
        }
    }]);

    return PointList;
}();

exports.default = PointList;
//# sourceMappingURL=PointList.js.map