"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _MatrixBase2 = require("./MatrixBase");

var _MatrixBase3 = _interopRequireDefault(_MatrixBase2);

var _Vector = require("./Vector3");

var _Vector2 = _interopRequireDefault(_Vector);

var _Vector3 = require("./Vector4");

var _Vector4 = _interopRequireDefault(_Vector3);

var _glMatrix = require("gl-matrix");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Matrix = function (_MatrixBase) {
    _inherits(Matrix, _MatrixBase);

    function Matrix(arr) {
        _classCallCheck(this, Matrix);

        var _this = _possibleConstructorReturn(this, (Matrix.__proto__ || Object.getPrototypeOf(Matrix)).call(this));

        if (arr) {
            _this.rawElements = arr;
        } else {
            _this.rawElements = _glMatrix.mat4.create();
        }
        return _this;
    }

    _createClass(Matrix, [{
        key: "getAt",
        value: function getAt(row, colmun) {
            return this.rawElements[colmun * 4 + row];
        }
    }, {
        key: "setAt",
        value: function setAt(row, colmun, val) {
            this.rawElements[colmun * 4 + row] = val;
        }
    }, {
        key: "getBySingleIndex",
        value: function getBySingleIndex(index) {
            return this.rawElements[index];
        }
    }, {
        key: "getColmun",
        value: function getColmun(col) {
            return new _Vector4.default(this.rawElements[col * 4], this.rawElements[col * 4 + 1], this.rawElements[col * 4 + 2], this.rawElements[col * 4 + 3]);
        }
        /**
        * Get row
        * @params row [0-3]
        */

    }, {
        key: "getRow",
        value: function getRow(row) {
            return new _Vector4.default(this.rawElements[row], this.rawElements[row + 4], this.rawElements[row + 8], this.rawElements[row + 12]);
        }
    }, {
        key: "multiplyWith",
        value: function multiplyWith(m) {
            return Matrix.multiply(this, m);
        }
    }, {
        key: "equalWith",
        value: function equalWith(m) {
            return Matrix.equals(m, this);
        }
    }, {
        key: "toString",
        value: function toString() {
            return "|" + this.getBySingleIndex(0) + " " + this.getBySingleIndex(4) + " " + this.getBySingleIndex(8) + " " + this.getBySingleIndex(12) + "|\n\n                 |" + this.getBySingleIndex(1) + " " + this.getBySingleIndex(5) + " " + this.getBySingleIndex(9) + " " + this.getBySingleIndex(13) + "|\n\n                 |" + this.getBySingleIndex(2) + " " + this.getBySingleIndex(6) + " " + this.getBySingleIndex(10) + " " + this.getBySingleIndex(14) + "|\n\n                 |" + this.getBySingleIndex(3) + " " + this.getBySingleIndex(7) + " " + this.getBySingleIndex(11) + " " + this.getBySingleIndex(15) + "|";
        }
    }, {
        key: "toMathematicaString",
        value: function toMathematicaString() {
            return "{{" + this.getBySingleIndex(0) + "," + this.getBySingleIndex(4) + "," + this.getBySingleIndex(8) + "," + this.getBySingleIndex(12) + "},\n                  {" + this.getBySingleIndex(1) + "," + this.getBySingleIndex(5) + "," + this.getBySingleIndex(9) + "," + this.getBySingleIndex(13) + "},\n                  {" + this.getBySingleIndex(2) + "," + this.getBySingleIndex(6) + "," + this.getBySingleIndex(10) + "," + this.getBySingleIndex(14) + "},\n                  {" + this.getBySingleIndex(3) + "," + this.getBySingleIndex(7) + "," + this.getBySingleIndex(11) + "," + this.getBySingleIndex(15) + "}}";
        }
    }, {
        key: "ElementCount",
        get: function get() {
            return 16;
        }
    }, {
        key: "RowCount",
        get: function get() {
            return 4;
        }
    }, {
        key: "ColmunCount",
        get: function get() {
            return 4;
        }
    }], [{
        key: "zero",
        value: function zero() {
            return new Matrix([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        }
    }, {
        key: "identity",
        value: function identity() {
            return new Matrix(_glMatrix.mat4.create());
        }
    }, {
        key: "fromElements",
        value: function fromElements(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
            return new Matrix([m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33]);
        }
    }, {
        key: "fromFunc",
        value: function fromFunc(f) {
            return new Matrix([f(0, 0), f(1, 0), f(2, 0), f(3, 0), f(0, 1), f(1, 1), f(2, 1), f(3, 1), f(0, 2), f(1, 2), f(2, 2), f(3, 2), f(0, 3), f(1, 3), f(2, 3), f(3, 3)]);
        }
    }, {
        key: "equals",
        value: function equals(m1, m2) {
            return Matrix.__elementEquals(m1, m2);
        }
    }, {
        key: "add",
        value: function add(m1, m2) {
            var mat = _glMatrix.mat4.create();
            for (var i = 0; i < 16; i++) {
                mat[i] = m1.rawElements[i] + m2.rawElements[i];
            }
            return new Matrix(mat);
        }
    }, {
        key: "subtract",
        value: function subtract(m1, m2) {
            return Matrix.add(m1, Matrix.negate(m2));
        }
    }, {
        key: "scalarMultiply",
        value: function scalarMultiply(s, m) {
            var newMat = _glMatrix.mat4.create();
            _glMatrix.mat4.multiply(newMat, [s, 0, 0, 0, 0, s, 0, 0, 0, 0, s, 0, 0, 0, 0, s], m.rawElements);
            return new Matrix(newMat);
        }
    }, {
        key: "multiply",
        value: function multiply(m1, m2) {
            var newMat = _glMatrix.mat4.create();
            return new Matrix(_glMatrix.mat4.mul(newMat, m1.rawElements, m2.rawElements));
        }
    }, {
        key: "trs",
        value: function trs(t, rot, s) {
            var newMat = _glMatrix.mat4.create();
            var cacheMat = _glMatrix.mat4.create();
            _glMatrix.mat4.mul(newMat, _glMatrix.mat4.translate(newMat, _glMatrix.mat4.create(), t.rawElements), _glMatrix.mat4.fromQuat(cacheMat, rot.rawElements));
            _glMatrix.mat4.scale(newMat, newMat, s.rawElements);
            return new Matrix(newMat);
        }
    }, {
        key: "negate",
        value: function negate(m) {
            return this.scalarMultiply(-1, m);
        }
    }, {
        key: "transpose",
        value: function transpose(m) {
            var newMat = _glMatrix.mat4.create();
            return new Matrix(_glMatrix.mat4.transpose(newMat, m.rawElements));
        }
    }, {
        key: "transformPoint",
        value: function transformPoint(m, t) {
            var newVec = _glMatrix.vec3.create();
            _glMatrix.vec3.transformMat4(newVec, t.rawElements, m.rawElements);
            return new _Vector2.default(newVec);
        }
    }, {
        key: "transformNormal",
        value: function transformNormal(m, t) {
            var newVec = _glMatrix.vec4.create();
            var trans = _glMatrix.vec4.create();
            trans[0] = t.X;
            trans[1] = t.Y;
            trans[2] = t.Z;
            trans[3] = 0;
            _glMatrix.vec4.transformMat4(newVec, trans, m.rawElements);
            return new _Vector2.default(newVec[0], newVec[1], newVec[2]);
        }
    }, {
        key: "transform",
        value: function transform(m, t) {
            var newVec = _glMatrix.vec4.create();
            var trans = _glMatrix.vec4.create();
            trans[0] = t.X;
            trans[1] = t.Y;
            trans[2] = t.Z;
            trans[3] = t.W;
            _glMatrix.vec4.transformMat4(newVec, trans, m.rawElements);
            return new _Vector4.default(newVec[0], newVec[1], newVec[2], newVec[3]);
        }
        /**
         * Retrieve determinant of passed matrix
         */

    }, {
        key: "determinant",
        value: function determinant(m) {
            return _glMatrix.mat4.determinant(m.rawElements);
        }
        /**
         * Compute inverted passed matrix.
         */

    }, {
        key: "inverse",
        value: function inverse(m) {
            var newMat = _glMatrix.mat4.create();
            return new Matrix(_glMatrix.mat4.invert(newMat, m.rawElements));
        }
        /**
         * Generate linear translation transform matrix.
         */

    }, {
        key: "translate",
        value: function translate(v) {
            var newMat = _glMatrix.mat4.create();
            _glMatrix.mat4.translate(newMat, newMat, v.rawElements);
            return new Matrix(newMat);
        }
        /**
         * Generate linear scaling transform matrix.
         */

    }, {
        key: "scale",
        value: function scale(v) {
            var newMat = _glMatrix.mat4.create();
            _glMatrix.mat4.scale(newMat, newMat, v.rawElements);
            return new Matrix(newMat);
        }
    }, {
        key: "rotateX",
        value: function rotateX(angle) {
            var newMat = _glMatrix.mat4.create();
            _glMatrix.mat4.rotateX(newMat, newMat, angle);
            return new Matrix(newMat);
        }
    }, {
        key: "rotateY",
        value: function rotateY(angle) {
            var newMat = _glMatrix.mat4.create();
            _glMatrix.mat4.rotateY(newMat, newMat, angle);
            return new Matrix(newMat);
        }
    }, {
        key: "rotateZ",
        value: function rotateZ(angle) {
            var newMat = _glMatrix.mat4.create();
            _glMatrix.mat4.rotateZ(newMat, newMat, angle);
            return new Matrix(newMat);
        }
    }, {
        key: "rotationQuaternion",
        value: function rotationQuaternion(quat_) {
            var quaternion = _glMatrix.quat.create();
            var newMat = _glMatrix.mat4.create();
            _glMatrix.quat.normalize(quaternion, quat_.rawElements);
            _glMatrix.mat4.fromQuat(newMat, quaternion);
            return new Matrix(newMat);
        }
    }, {
        key: "frustum",
        value: function frustum(left, right, bottom, top, near, far) {
            var newMat = _glMatrix.mat4.create();
            _glMatrix.mat4.frustum(newMat, left, right, bottom, top, near, far);
            return new Matrix(newMat);
        }
    }, {
        key: "ortho",
        value: function ortho(left, right, bottom, top, near, far) {
            var newMat = _glMatrix.mat4.create();
            _glMatrix.mat4.ortho(newMat, left, right, bottom, top, near, far);
            return new Matrix(newMat);
        }
    }, {
        key: "perspective",
        value: function perspective(fovy, aspect, near, far) {
            var newMat = _glMatrix.mat4.create();
            _glMatrix.mat4.perspective(newMat, fovy, aspect, near, far);
            return new Matrix(newMat);
        }
    }, {
        key: "lookAt",
        value: function lookAt(eye, _lookAt, up) {
            var newMat = _glMatrix.mat4.create();
            _glMatrix.mat4.lookAt(newMat, eye.rawElements, _lookAt.rawElements, up.rawElements);
            return new Matrix(newMat);
        }
    }]);

    return Matrix;
}(_MatrixBase3.default);

exports.default = Matrix;
//# sourceMappingURL=Matrix.js.map