"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Vector = require("./Vector3");

var _Vector2 = _interopRequireDefault(_Vector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Axis-Aligned Bounding Box implementation
 */
var AABB = function () {
    function AABB() {
        _classCallCheck(this, AABB);
    }

    _createClass(AABB, [{
        key: "expandAABB",

        /**
         * Calculate new bounding box with considering the new point is included.
         * @param  {Vector3} newPoint the point that will be considered that it should be in this bounding box.
         */
        value: function expandAABB(newPoint) {
            if (this.pointLBF == null) {
                // assume this is first time to be used this AABB instance
                this.pointLBF = _Vector2.default.copy(newPoint);
                this.pointRTN = _Vector2.default.copy(newPoint);
            }
            this.pointLBF = _Vector2.default.min(newPoint, this.pointLBF);
            this.pointRTN = _Vector2.default.max(newPoint, this.pointRTN);
        }
        /**
         * Clean up this AABB with initial value.
         */

    }, {
        key: "clear",
        value: function clear() {
            this.pointLBF = null;
            this.pointRTN = null;
        }
    }, {
        key: "toMathematicaCuboid",
        value: function toMathematicaCuboid() {
            return "Cuboid[" + this.pointLBF.toMathematicaString() + "," + this.pointRTN.toMathematicaString() + "]";
        }
    }, {
        key: "Width",

        /**
         * Width of this AABB
         */
        get: function get() {
            return Math.abs(this.pointLBF.X - this.pointRTN.X);
        }
        /**
         * Height of this AABB
         */

    }, {
        key: "Height",
        get: function get() {
            return Math.abs(this.pointLBF.Y - this.pointRTN.Y);
        }
        /**
         * Distance of this AABB
         */

    }, {
        key: "Distance",
        get: function get() {
            return Math.abs(this.pointLBF.Z - this.pointRTN.Z);
        }
    }]);

    return AABB;
}();

exports.default = AABB;
//# sourceMappingURL=AABB.js.map