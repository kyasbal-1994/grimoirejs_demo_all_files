"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Vector = require("./Vector4");

var _Vector2 = _interopRequireDefault(_Vector);

var _Vector3 = require("./Vector3");

var _Vector4 = _interopRequireDefault(_Vector3);

var _Vector5 = require("./Vector2");

var _Vector6 = _interopRequireDefault(_Vector5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 *  The array object for managing vectors having specific dimension.
 */
var VectorArray = function () {
    function VectorArray(length) {
        _classCallCheck(this, VectorArray);

        if (length) {
            this.rawElements = new Array(length);
        } else {
            this.rawElements = [];
        }
    }
    /**
     * Generate vector array filled with zero vectors.
     * @param  {number}      dimension [description]
     * @param  {number}      length   [description]
     * @return {VectorArray}          [description]
     */


    _createClass(VectorArray, [{
        key: "equalWith",
        value: function equalWith(v1) {
            return VectorArray.equals(this, v1);
        }
    }, {
        key: "appendVector",
        value: function appendVector(vector) {
            this._verifyDimension(vector);
            this.rawElements.push(vector.rawElements);
        }
    }, {
        key: "setVector",
        value: function setVector(index, vector) {
            this._verifyDimension(vector);
            for (var elemIndex = 0; elemIndex < vector.ElementCount; elemIndex++) {
                this.rawElements[index * this._dimension + elemIndex] = vector.rawElements[elemIndex];
            }
            return;
        }
    }, {
        key: "setRawArray",
        value: function setRawArray(index, rawArray) {
            for (var elemIndex = 0; elemIndex < this._dimension; elemIndex++) {
                this.rawElements[index * this._dimension + elemIndex] = rawArray[elemIndex] ? rawArray[elemIndex] : 0;
            }
            return;
        }
    }, {
        key: "getVector",
        value: function getVector(index) {
            switch (this._dimension) {
                case 2:
                    return new _Vector6.default(this.rawElements[index * this._dimension + 0], this.rawElements[index * this._dimension + 1]);
                case 3:
                    return new _Vector4.default(this.rawElements[index * this._dimension + 0], this.rawElements[index * this._dimension + 1], this.rawElements[index * this._dimension + 2]);
                case 4:
                    return new _Vector2.default(this.rawElements[index * this._dimension + 0], this.rawElements[index * this._dimension + 1], this.rawElements[index * this._dimension + 2], this.rawElements[index * this._dimension + 3]);
                default:
                    return null;
            }
        }
    }, {
        key: "setVectorArray",
        value: function setVectorArray(vectors) {
            var _this = this;

            var offset = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

            if (vectors.length === 0) {
                return;
            }
            this._verifyDimension(vectors[0]);
            vectors.forEach(function (e, i) {
                if (_this._dimension !== e.ElementCount) {
                    throw new Error("Unmatch unit size of vector element! at:" + i);
                }
                for (var elemIndex = 0; elemIndex < _this._dimension; elemIndex++) {
                    _this.rawElements[offset + _this._dimension * i + elemIndex] = e.rawElements[elemIndex];
                }
            });
            return;
        }
    }, {
        key: "getVectorArray",
        value: function getVectorArray() {
            if (this.rawElements.length === 0) {
                return [];
            }
            var result = new Array(this.rawElements.length / this._dimension);
            for (var i = 0; i < result.length; i++) {
                result[i] = this.getVector(i);
            }
            return result;
        }
    }, {
        key: "_verifyDimension",
        value: function _verifyDimension(vector) {
            if (typeof this._dimension !== "undefined" && this._dimension !== vector.ElementCount) {
                throw new Error("Unmatch unit size of vectors!");
            } else if (typeof this._dimension === "undefined") {
                this._dimension = vector.ElementCount;
            }
        }
    }, {
        key: "dimension",
        get: function get() {
            return this._dimension;
        }
    }], [{
        key: "zeroVectorArray",
        value: function zeroVectorArray(dimension, length) {
            var array = new VectorArray(dimension * length);
            for (var i = 0; i < dimension * length; i++) {
                array.rawElements[i] = 0;
            }
            array._dimension = dimension;
            return array;
        }
    }, {
        key: "fromArray",
        value: function fromArray(dimension, source) {
            var array = new VectorArray(source.length);
            array._dimension = dimension;
            for (var i = 0; i < source.length; i++) {
                array.rawElements[i] = source[i];
            }
            return array;
        }
    }, {
        key: "equals",
        value: function equals(v1, v2) {
            if (v1.rawElements.length !== v2.rawElements.length || v1._dimension !== v2._dimension) {
                return false;
            }
            for (var i = 0; i < v1.rawElements.length; i++) {
                if (v1.rawElements[i] !== v2.rawElements[i]) {
                    return false;
                }
            }
            return true;
        }
    }]);

    return VectorArray;
}();

exports.default = VectorArray;
//# sourceMappingURL=VectorArray.js.map