"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _VectorBase2 = require("./VectorBase");

var _VectorBase3 = _interopRequireDefault(_VectorBase2);

var _glMatrix = require("gl-matrix");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Vector3 = function (_VectorBase) {
    _inherits(Vector3, _VectorBase);

    function Vector3(x, y, z) {
        _classCallCheck(this, Vector3);

        var _this = _possibleConstructorReturn(this, (Vector3.__proto__ || Object.getPrototypeOf(Vector3)).call(this));

        if (typeof y === "undefined") {
            _this.rawElements = x;
            return _possibleConstructorReturn(_this);
        }
        _this.rawElements = [x, y, z];
        return _this;
    }

    _createClass(Vector3, [{
        key: "toMathematicaString",
        value: function toMathematicaString() {
            return "{" + this.X + "," + this.Y + "," + this.Z + "}";
        }
    }, {
        key: "normalizeThis",
        value: function normalizeThis() {
            return Vector3.normalize(this);
        }
    }, {
        key: "dotWith",
        value: function dotWith(v) {
            return Vector3.dot(this, v);
        }
    }, {
        key: "addWith",
        value: function addWith(v) {
            return Vector3.add(this, v);
        }
    }, {
        key: "subtractWith",
        value: function subtractWith(v) {
            return Vector3.subtract(this, v);
        }
    }, {
        key: "multiplyWith",
        value: function multiplyWith(s) {
            return Vector3.multiply(s, this);
        }
    }, {
        key: "negateThis",
        value: function negateThis() {
            return Vector3.negate(this);
        }
    }, {
        key: "equalWith",
        value: function equalWith(v) {
            return Vector3.equals(this, v);
        }
    }, {
        key: "nearlyEqualWith",
        value: function nearlyEqualWith(v) {
            return Vector3.nearlyEquals(this, v);
        }
    }, {
        key: "crossWith",
        value: function crossWith(v) {
            return Vector3.cross(this, v);
        }
    }, {
        key: "toString",
        value: function toString() {
            return "(" + this.X + ", " + this.Y + ", " + this.Z + ")";
        }
    }, {
        key: "toDisplayString",
        value: function toDisplayString() {
            return "Vector3" + this.toString();
        }
    }, {
        key: "normalized",
        get: function get() {
            return this.multiplyWith(1 / this.magnitude);
        }
    }, {
        key: "X",
        get: function get() {
            return this.rawElements[0];
        },
        set: function set(x) {
            this.rawElements[0] = +x;
        }
    }, {
        key: "Y",
        get: function get() {
            return this.rawElements[1];
        },
        set: function set(y) {
            this.rawElements[1] = +y;
        }
    }, {
        key: "Z",
        get: function get() {
            return this.rawElements[2];
        },
        set: function set(z) {
            this.rawElements[2] = +z;
        }
    }, {
        key: "ElementCount",
        get: function get() {
            return 3;
        }
    }], [{
        key: "copy",
        value: function copy(source) {
            return new Vector3(source.X, source.Y, source.Z);
        }
    }, {
        key: "dot",
        value: function dot(v1, v2) {
            return _glMatrix.vec3.dot(v1.rawElements, v2.rawElements);
        }
    }, {
        key: "add",
        value: function add(v1, v2) {
            var newVec = _glMatrix.vec3.create();
            return new Vector3(_glMatrix.vec3.add(newVec, v1.rawElements, v2.rawElements));
        }
    }, {
        key: "subtract",
        value: function subtract(v1, v2) {
            var newVec = _glMatrix.vec3.create();
            return new Vector3(_glMatrix.vec3.sub(newVec, v1.rawElements, v2.rawElements));
        }
    }, {
        key: "multiply",
        value: function multiply(s, v) {
            var newVec = _glMatrix.vec3.create();
            return new Vector3(_glMatrix.vec3.scale(newVec, v.rawElements, s));
        }
    }, {
        key: "negate",
        value: function negate(v1) {
            return Vector3.multiply(-1, v1);
        }
    }, {
        key: "equals",
        value: function equals(v1, v2) {
            return _VectorBase3.default.__elementEquals(v1, v2);
        }
    }, {
        key: "nearlyEquals",
        value: function nearlyEquals(v1, v2) {
            return _VectorBase3.default.__nearlyElementEquals(v1, v2);
        }
    }, {
        key: "normalize",
        value: function normalize(v1) {
            var newVec = _glMatrix.vec3.create();
            return new Vector3(_glMatrix.vec3.normalize(newVec, v1.rawElements));
        }
    }, {
        key: "cross",
        value: function cross(v1, v2) {
            var newVec = _glMatrix.vec3.create();
            return new Vector3(_glMatrix.vec3.cross(newVec, v1.rawElements, v2.rawElements));
        }
    }, {
        key: "min",
        value: function min(v1, v2) {
            return new Vector3(_VectorBase3.default.__fromGenerationFunction(v1, v2, function (i, _v1, _v2) {
                return Math.min(_v1.rawElements[i], _v2.rawElements[i]);
            }));
        }
    }, {
        key: "max",
        value: function max(v1, v2) {
            return new Vector3(_VectorBase3.default.__fromGenerationFunction(v1, v2, function (i, _v1, _v2) {
                return Math.max(_v1.rawElements[i], _v2.rawElements[i]);
            }));
        }
    }, {
        key: "angle",
        value: function angle(v1, v2) {
            return Math.acos(Vector3.dot(v1.normalized, v2.normalized));
        }
    }, {
        key: "parse",
        value: function parse(str) {
            var parseResult = _VectorBase3.default.__parse(str);
            var elements = parseResult.elements;
            if (!elements || elements.length !== 1 && elements.length !== 3) {
                return undefined;
            }
            var result = void 0;
            if (elements.length === 1) {
                result = new Vector3(elements[0], elements[0], elements[0]);
            } else {
                result = new Vector3(elements[0], elements[1], elements[2]);
            }
            if (parseResult.needNormalize) {
                result = result.normalizeThis();
            }
            if (parseResult.coefficient) {
                result = result.multiplyWith(parseResult.coefficient);
            }
            if (parseResult.needNegate) {
                result = result.negateThis();
            }
            return result;
        }
    }, {
        key: "XUnit",
        get: function get() {
            return new Vector3(1, 0, 0);
        }
    }, {
        key: "YUnit",
        get: function get() {
            return new Vector3(0, 1, 0);
        }
    }, {
        key: "ZUnit",
        get: function get() {
            return new Vector3(0, 0, 1);
        }
    }, {
        key: "Zero",
        get: function get() {
            return new Vector3(0, 0, 0);
        }
    }, {
        key: "One",
        get: function get() {
            return new Vector3(1, 1, 1);
        }
    }]);

    return Vector3;
}(_VectorBase3.default);

exports.default = Vector3;
//# sourceMappingURL=Vector3.js.map