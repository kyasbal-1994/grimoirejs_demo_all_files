"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MatrixBase = function () {
    function MatrixBase() {
        _classCallCheck(this, MatrixBase);
    }

    _createClass(MatrixBase, [{
        key: "getAt",
        value: function getAt(row, colmun) {
            throw new Error("Not implemented");
        }
    }, {
        key: "getBySingleIndex",
        value: function getBySingleIndex(index) {
            throw new Error("Not implemented");
        }
    }, {
        key: "RowCount",
        get: function get() {
            return 0;
        }
    }, {
        key: "ColmunCount",
        get: function get() {
            return 0;
        }
    }], [{
        key: "__elementEquals",
        value: function __elementEquals(m1, m2) {
            if (m1.RowCount !== m2.RowCount || m1.ColmunCount !== m2.ColmunCount) {
                return false;
            }
            var count = m1.RowCount * m2.ColmunCount;
            for (var i = 0; i < count; i++) {
                if (m1.getBySingleIndex(i) !== m2.getBySingleIndex(i)) {
                    return false;
                }
            }
            return true;
        }
    }]);

    return MatrixBase;
}();

exports.default = MatrixBase;
//# sourceMappingURL=MatrixBase.js.map