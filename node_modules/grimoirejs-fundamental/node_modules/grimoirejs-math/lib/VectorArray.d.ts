import VectorBase from "./VectorBase";
/**
 *  The array object for managing vectors having specific dimension.
 */
declare class VectorArray {
    rawElements: number[];
    private _dimension;
    /**
     * Generate vector array filled with zero vectors.
     * @param  {number}      dimension [description]
     * @param  {number}      length   [description]
     * @return {VectorArray}          [description]
     */
    static zeroVectorArray(dimension: number, length: number): VectorArray;
    static fromArray(dimension: number, source: number[]): VectorArray;
    static equals(v1: VectorArray, v2: VectorArray): boolean;
    constructor(length?: number);
    equalWith(v1: VectorArray): boolean;
    appendVector(vector: VectorBase): void;
    setVector(index: number, vector: VectorBase): void;
    setRawArray(index: number, rawArray: number[]): void;
    getVector<T extends VectorBase>(index: number): T;
    setVectorArray(vectors: VectorBase[], offset?: number): void;
    getVectorArray<T extends VectorBase>(): T[];
    readonly dimension: number;
    private _verifyDimension(vector);
}
export default VectorArray;
