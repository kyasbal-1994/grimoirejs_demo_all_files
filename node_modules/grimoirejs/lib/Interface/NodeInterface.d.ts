import Attribute from "../Node/Attribute";
import NSIdentity from "../Base/NSIdentity";
import Component from "../Node/Component";
import INodeInterfaceBase from "./INodeInterfaceBase";
import IComponentInterface from "./IComponentInterface";
import GomlNode from "../Node/GomlNode";
/**
 * 複数のノードを対象とした操作を提供するインタフェース
 */
declare class NodeInterface implements INodeInterfaceBase {
    nodes: GomlNode[][];
    constructor(nodes: GomlNode[][]);
    queryFunc(query: string): IComponentInterface;
    queryComponents(query: string): Component[][][];
    get<T extends GomlNode>(): T;
    get<T extends GomlNode>(nodeIndex: number): T;
    get<T extends GomlNode>(treeIndex: number, nodeIndex: number): T;
    attr(attrName: string | NSIdentity): Attribute;
    attr(attrName: string | NSIdentity, value: any): void;
    /**
     * 対象ノードにイベントリスナを追加します。
     * @param {string}   eventName [description]
     * @param {Function} listener  [description]
     */
    on(eventName: string, listener: Function): NodeInterface;
    /**
     * 対象ノードに指定したイベントリスナが登録されていれば削除します
     * @param {string}   eventName [description]
     * @param {Function} listener  [description]
     */
    off(eventName: string, listener: Function): NodeInterface;
    /**
     * このノードインタフェースが対象とするノードそれぞれに、
     * タグで指定したノードを子要素として追加します。
     * @param {string} tag [description]
     */
    append(tag: string): NodeInterface;
    /**
     * このノードインタフェースが対象とするノードの子に、
     * 指定されたノードが存在すれば削除します。
     * @param {GomlNode} child [description]
     */
    remove(child: GomlNode): NodeInterface;
    /**
     * このノードインタフェースが対象とするノードに対して反復処理を行います
     * @param  {GomlNode} callback [description]
     * @return {[type]}            [description]
     */
    forEach(callback: ((node: GomlNode) => void)): NodeInterface;
    /**
     * このノードインタフェースが対象とするノードを有効、または無効にします。
     * @param {boolean} enable [description]
     */
    setEnable(enable: boolean): NodeInterface;
    /**
     * このノードインタフェースにアタッチされたコンポーネントをセレクタで検索します。
     * @pram  {string}      query [description]
     * @return {Component[]}       [description]
     */
    find(query: string): Component[];
    /**
     * このノードインタフェースが対象とするノードのそれぞれの子ノードを対象とする、
     * 新しいノードインタフェースを取得します。
     * @return {NodeInterface} [description]
     */
    children(): NodeInterface;
    /**
     * 対象ノードにコンポーネントをアタッチします。
     * @param {Component} component [description]
     */
    addCompnent(componentId: NSIdentity): NodeInterface;
    /**
     * 最初の対象ノードを取得する
     * @return {GomlNode} [description]
     */
    first(): GomlNode;
    /**
     * 対象となる唯一のノードを取得する。
     * 対象が存在しない、あるいは複数存在するときは例外を投げる。
     * @return {GomlNode} [description]
     */
    single(): GomlNode;
    /**
     * 対象となるノードの個数を取得する
     * @return {number} [description]
     */
    count(): number;
}
export default NodeInterface;
