import GrimoireInterface from "../GrimoireInterface";
import NodeInterface from "./NodeInterface";
/**
 * Provides interfaces to treat whole goml tree for each.
 */
class GomlInterface {
    constructor(rootNodes) {
        this.rootNodes = rootNodes;
    }
    queryFunc(query) {
        const context = new NodeInterface(this.queryNodes(query));
        const queryFunc = context.queryFunc.bind(context);
        Object.setPrototypeOf(queryFunc, context);
        return queryFunc;
    }
    queryNodes(query) {
        return this.rootNodes.map((root) => {
            const nodelist = root.element.ownerDocument.querySelectorAll(query);
            const nodes = [];
            for (let i = 0; i < nodelist.length; i++) {
                const node = GrimoireInterface.nodeDictionary[nodelist.item(i).getAttribute("x-gr-id")];
                if (node) {
                    nodes.push(node);
                }
            }
            return nodes;
        });
    }
}
export default GomlInterface;
//# sourceMappingURL=GomlInterface.js.map