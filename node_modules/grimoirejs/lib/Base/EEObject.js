import { EventEmitter } from "events";
import IDObject from "./IDObject";
/**
 * EventEmitterをmixinしたIDObject
 */
class EEObject extends IDObject {
    constructor() {
        super();
    }
    emitException(eventName, error) {
        error.handled = false;
        const listeners = this.listeners(eventName);
        for (let i = 0; i < listeners.length; i++) {
            listeners[listeners.length - i - 1](error);
            if (error.handled) {
                return;
            }
        }
        if (eventName !== "error") {
            this.emitException("error", error);
        }
        else {
            throw error;
        }
    }
}
function applyMixins(derivedCtor, baseCtors) {
    baseCtors.forEach((baseCtor) => {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {
            derivedCtor.prototype[name] = baseCtor.prototype[name];
        });
    });
}
applyMixins(EEObject, [EventEmitter]);
export default EEObject;
//# sourceMappingURL=EEObject.js.map