import NSIdentity from "./NSIdentity";
import NSDictionary from "./NSDictionary";
/**
 * Provides static methods to ensure arguments are valid type.
 */
class Ensure {
    /**
     * Ensure specified str being string
     * @param  {string | number}      str [description]
     * @return {string}      [description]
     */
    static ensureString(str) {
        if (typeof str === "string") {
            return str;
        }
        else if (typeof str === "number") {
            return str.toString();
        }
        else {
            throw new Error("Specified argument can not convert into string");
        }
    }
    /**
     * Ensure specified number being number
     * @param  {string | number}      str [description]
     * @return {string}      [description]
     */
    static ensureNumber(num) {
        if (typeof num === "string") {
            return parseInt(num, 10);
        }
        else if (typeof num === "number") {
            return num;
        }
        else {
            throw new Error("specified argument can not be converted into number");
        }
    }
    static ensureTobeNSIdentity(name) {
        if (!name) {
            return undefined;
        }
        if (typeof name === "string") {
            return new NSIdentity(name);
        }
        else {
            return name;
        }
    }
    static ensureTobeNSIdentityArray(names) {
        if (!names) {
            return [];
        }
        const newArr = [];
        for (let i = 0; i < names.length; i++) {
            newArr.push(this.ensureTobeNSIdentity(names[i]));
        }
        return newArr;
    }
    static ensureTobeNSDictionary(dict, defaultNamespace) {
        if (!dict) {
            return new NSDictionary();
        }
        if (dict instanceof NSDictionary) {
            return dict;
        }
        else {
            const newDict = new NSDictionary();
            for (let key in dict) {
                newDict.set(new NSIdentity(defaultNamespace, key), dict[key]);
            }
            return newDict;
        }
    }
    static ensureTobeMessage(message) {
        if (message.startsWith("$")) {
            return message;
        }
        else {
            return "$" + message;
        }
    }
}
export default Ensure;
//# sourceMappingURL=Ensure.js.map