class NSSet {
    constructor() {
        this._contentArray = [];
    }
    static fromArray(array) {
        const nSet = new NSSet();
        nSet.pushArray(array);
        return nSet;
    }
    push(item) {
        const index = this._contentArray.findIndex(id => id.fqn === item.fqn);
        if (index === -1) {
            this._contentArray.push(item);
        }
        return this;
    }
    pushArray(item) {
        item.forEach(v => {
            this.push(v);
        });
        return this;
    }
    values() {
        return this._contentArray.values();
    }
    toArray() {
        const ret = [];
        for (let item of this._contentArray) {
            ret.push(item);
        }
        return ret;
    }
    clone() {
        const newSet = new NSSet();
        for (let i of this._contentArray) {
            newSet.push(i);
        }
        return newSet;
    }
    merge(other) {
        for (let elem of other._contentArray) {
            this.push(elem);
        }
        return this;
    }
}
export default NSSet;
//# sourceMappingURL=NSSet.js.map