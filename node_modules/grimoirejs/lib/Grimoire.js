import GrimoireInterface from "./GrimoireInterface";
import GomlLoader from "./Node/GomlLoader";
/**
 * Provides procedures for initializing.
 */
class GrimoireInitializer {
    /**
     * Start initializing
     * @return {Promise<void>} The promise which will be resolved when all of the Goml script was loaded.
     */
    static initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                GrimoireInitializer._copyGLConstants();
                GrimoireInterface.initialize();
                yield GrimoireInitializer._waitForDOMLoading();
                yield GrimoireInterface.resolvePlugins();
                yield GomlLoader.loadForPage();
            }
            catch (e) {
                console.error(e);
            }
        });
    }
    /**
     * Ensure WebGLRenderingContext.[CONSTANTS] is exisiting.
     * Some of the browsers contains them in prototype.
     */
    static _copyGLConstants() {
        if (WebGLRenderingContext.ONE) {
            // Assume the CONSTANTS are already in WebGLRenderingContext
            // Chrome,Firefox,IE,Edge...
            return;
        }
        // Otherwise like ""Safari""
        for (let propName in WebGLRenderingContext.prototype) {
            if (/^[A-Z]/.test(propName)) {
                const property = WebGLRenderingContext.prototype[propName];
                WebGLRenderingContext[propName] = property;
            }
        }
    }
    /**
     * Obtain the promise object which will be resolved when DOMContentLoaded event was rised.
     * @return {Promise<void>} the promise
     */
    static _waitForDOMLoading() {
        return new Promise((resolve) => {
            window.addEventListener("DOMContentLoaded", () => {
                resolve();
            });
        });
    }
}
/**
 * Just start the process.
 */
GrimoireInitializer.initialize();
window["gr"] = GrimoireInterface;
export default GrimoireInterface;
//# sourceMappingURL=Grimoire.js.map