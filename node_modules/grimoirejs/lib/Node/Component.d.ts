import IAttributeDeclaration from "./IAttributeDeclaration";
import IGomlInterface from "../Interface/IGomlInterface";
import Attribute from "./Attribute";
import GomlNode from "./GomlNode";
import NSDictionary from "../Base/NSDictionary";
import NSIdentity from "../Base/NSIdentity";
import IDObject from "../Base/IDObject";
/**
 * Base class for any components
 */
declare class Component extends IDObject {
    /**
     * Name of this component
     * @type {NSIdentity}
     */
    name: NSIdentity;
    /**
     * Attributes managed by this component
     * @type {NSDictionary<Attribute>}
     */
    attributes: NSDictionary<Attribute>;
    /**
     * Node this component is attached
     * @type {GomlNode}
     */
    node: GomlNode;
    /**
     * XMLElement of this component
     * @type {Element}
     */
    element: Element;
    /**
     * Whether this component was created by nodeDeclaration
     * @type {boolean}
     */
    isDefaultComponent: boolean;
    /**
     * Flag that this component is activated or not.
     * @type {boolean}
     */
    private _enabled;
    private _handlers;
    private _additionalAttributesNames;
    enabled: boolean;
    /**
     * The dictionary which is shared in entire tree.
     * @return {NSDictionary<any>} [description]
     */
    readonly companion: NSDictionary<any>;
    /**
     * Tree interface for the tree this node is attached.
     * @return {IGomlInterface} [description]
     */
    readonly tree: IGomlInterface;
    /**
     * Obtain value of attribute. When the attribute is not existing, this method would return undefined.
     * @param  {string} name [description]
     * @return {any}         [description]
     */
    getValue(name: string): any;
    /**
     * Set value of attribute
     * @param {string} name  [description]
     * @param {any}    value [description]
     */
    setValue(name: string, value: any): void;
    getAttribute(name: string): Attribute;
    addEnabledObserver(handler: (component: Component) => void): void;
    removeEnabledObserver(handler: (component: Component) => void): void;
    resolveDefaultAttributes(nodeAttributes: {
        [key: string]: string;
    }): any;
    /**
     * Add attribute
     * @param {string}                name      [description]
     * @param {IAttributeDeclaration} attribute [description]
     */
    protected __addAtribute(name: string, attribute: IAttributeDeclaration): void;
    protected __removeAttributes(name?: string): void;
}
export default Component;
