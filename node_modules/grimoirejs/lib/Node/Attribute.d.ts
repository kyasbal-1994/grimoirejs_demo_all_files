import NSDictionary from "../Base/NSDictionary";
import IGomlInterface from "../Interface/IGomlInterface";
import IAttributeDeclaration from "./IAttributeDeclaration";
import AttributeConverter from "./AttributeConverter";
import NSIdentity from "../Base/NSIdentity";
import Component from "./Component";
/**
 * Management a single attribute with specified type. Converter will serve a value with object with any type instead of string.
 * When attribute is changed, emit a "change" event. When attribute is requested, emit a "get" event.
 * If responsive flag is not true, event will not be emitted.
 */
declare class Attribute {
    name: NSIdentity;
    declaration: IAttributeDeclaration;
    converter: AttributeConverter;
    component: Component;
    private _value;
    private _handlers;
    readonly tree: IGomlInterface;
    readonly companion: NSDictionary<any>;
    /**
     * Get a value with specified type.
     * @return {any} value with specified type.
     */
    /**
     * Set a value with any type.
     * @param {any} val Value with string or specified type.
     */
    Value: any;
    /**
     * Construct a new attribute with name of key and any value with specified type. If constant flag is true, This attribute will be immutable.
     * If converter is not served, string converter will be set as default.
     * @param {string}        key       Key of this attribute.
     * @param {any}           value     Value of this attribute.
     * @param {ConverterBase} converter Converter of this attribute.
     * @param {boolean}       constant  Whether this attribute is immutable or not. False as default.
     */
    constructor(name: string, declaration: IAttributeDeclaration, component: Component);
    addObserver(handler: (attr: Attribute) => void): void;
    removeObserver(handler: (attr: Attribute) => void): void;
    /**
     * Bind converted value to specified field.
     * When target object was not specified, field of owner component would be assigned.
     * @param {string} variableName [description]
     * @param {any} targetObject [description]
     */
    boundTo(variableName: string, targetObject?: any): void;
    /**
     * Apply default value to attribute from DOM values.
     * @param {string }} domValues [description]
     */
    resolveDefaultValue(domValues: {
        [key: string]: string;
    }): void;
    private _notifyChange();
}
export default Attribute;
