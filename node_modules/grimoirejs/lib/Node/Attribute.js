import Ensure from "../Base/Ensure";
import NSIdentity from "../Base/NSIdentity";
import GrimoireInterface from "../GrimoireInterface";
/**
 * Management a single attribute with specified type. Converter will serve a value with object with any type instead of string.
 * When attribute is changed, emit a "change" event. When attribute is requested, emit a "get" event.
 * If responsive flag is not true, event will not be emitted.
 */
class Attribute {
    /**
     * Construct a new attribute with name of key and any value with specified type. If constant flag is true, This attribute will be immutable.
     * If converter is not served, string converter will be set as default.
     * @param {string}        key       Key of this attribute.
     * @param {any}           value     Value of this attribute.
     * @param {ConverterBase} converter Converter of this attribute.
     * @param {boolean}       constant  Whether this attribute is immutable or not. False as default.
     */
    constructor(name, declaration, component) {
        this._handlers = [];
        this.name = new NSIdentity(component.name.ns, name);
        this.component = component;
        this.declaration = declaration;
        const converterName = Ensure.ensureTobeNSIdentity(declaration.converter);
        this.converter = GrimoireInterface.converters.get(converterName);
        if (this.converter === void 0) {
            // When the specified converter was not found
            throw new Error(`Specified converter ${converterName.name} was not found from registered converters.\n Component: ${this.component.name.fqn}\n Attribute: ${this.name.name}`);
        }
        this.converter = {
            convert: this.converter.convert.bind(this),
            name: this.converter.name
        };
    }
    get tree() {
        return this.component.tree;
    }
    get companion() {
        return this.component.companion;
    }
    /**
     * Get a value with specified type.
     * @return {any} value with specified type.
     */
    get Value() {
        try {
            return this.converter.convert(this._value);
        }
        catch (e) {
            console.error(e); // TODO should be more convenient error handling
        }
    }
    /**
     * Set a value with any type.
     * @param {any} val Value with string or specified type.
     */
    set Value(val) {
        this._value = val;
        this._notifyChange();
    }
    addObserver(handler) {
        this._handlers.push(handler);
    }
    removeObserver(handler) {
        let index = -1;
        for (let i = 0; i < this._handlers.length; i++) {
            if (handler === this._handlers[i]) {
                index = i;
                break;
            }
        }
        if (index < 0) {
            return;
        }
        this._handlers.splice(index, 1);
    }
    /**
     * Bind converted value to specified field.
     * When target object was not specified, field of owner component would be assigned.
     * @param {string} variableName [description]
     * @param {any} targetObject [description]
     */
    boundTo(variableName, targetObject = this.component) {
        this.addObserver((v) => {
            targetObject[variableName] = v.Value;
        });
        targetObject[variableName] = this.Value;
    }
    /**
     * Apply default value to attribute from DOM values.
     * @param {string }} domValues [description]
     */
    resolveDefaultValue(domValues) {
        if (this._value !== void 0) {
            return;
        }
        let tagAttrValue = domValues[this.name.name];
        if (tagAttrValue !== void 0) {
            this.Value = tagAttrValue; // Dom指定値で解決
            return;
        }
        const nodeDefaultValue = this.component.node.nodeDeclaration.defaultAttributes.get(this.name);
        if (nodeDefaultValue !== void 0) {
            this.Value = nodeDefaultValue; // Node指定値で解決
            return;
        }
        const attrDefaultValue = this.declaration.defaultValue;
        this.Value = attrDefaultValue;
    }
    _notifyChange() {
        this._handlers.forEach((handler) => {
            handler(this);
        });
    }
}
export default Attribute;
//# sourceMappingURL=Attribute.js.map