import NodeUtility from "./NodeUtility";
import Attribute from "./Attribute";
import IDObject from "../Base/IDObject";
/**
 * Base class for any components
 */
class Component extends IDObject {
    constructor(...args) {
        super(...args);
        /**
         * Whether this component was created by nodeDeclaration
         * @type {boolean}
         */
        this.isDefaultComponent = false;
        /**
         * Flag that this component is activated or not.
         * @type {boolean}
         */
        this._enabled = true;
        this._handlers = [];
        this._additionalAttributesNames = [];
    }
    get enabled() {
        return this._enabled;
    }
    set enabled(val) {
        if (this._enabled === val) {
            return;
        }
        this._enabled = val;
        this._handlers.forEach((handler) => {
            handler(this);
        });
    }
    /**
     * The dictionary which is shared in entire tree.
     * @return {NSDictionary<any>} [description]
     */
    get companion() {
        return this.node ? this.node.companion : null;
    }
    /**
     * Tree interface for the tree this node is attached.
     * @return {IGomlInterface} [description]
     */
    get tree() {
        return this.node ? this.node.tree : null;
    }
    /**
     * Obtain value of attribute. When the attribute is not existing, this method would return undefined.
     * @param  {string} name [description]
     * @return {any}         [description]
     */
    getValue(name) {
        const attr = this.attributes.get(name);
        if (attr) {
            return attr.Value;
        }
        else {
            return undefined;
        }
    }
    /**
     * Set value of attribute
     * @param {string} name  [description]
     * @param {any}    value [description]
     */
    setValue(name, value) {
        const attr = this.attributes.get(name); // TODO:check readonly?
        if (attr) {
            attr.Value = value;
        }
    }
    getAttribute(name) {
        return this.attributes.get(name);
    }
    addEnabledObserver(handler) {
        this._handlers.push(handler);
    }
    removeEnabledObserver(handler) {
        let index = -1;
        for (let i = 0; i < this._handlers.length; i++) {
            if (handler === this._handlers[i]) {
                index = i;
                break;
            }
        }
        if (index < 0) {
            return;
        }
        this._handlers.splice(index, 1);
    }
    resolveDefaultAttributes(nodeAttributes) {
        if (this.isDefaultComponent) {
            this.attributes.forEach((attr) => attr.resolveDefaultValue(nodeAttributes));
        }
        else {
            const attrs = NodeUtility.getAttributes(this.element);
            this.attributes.forEach((attr) => attr.resolveDefaultValue(attrs));
        }
    }
    /**
     * Add attribute
     * @param {string}                name      [description]
     * @param {IAttributeDeclaration} attribute [description]
     */
    __addAtribute(name, attribute) {
        if (!attribute) {
            throw new Error("can not add attribute null or undefined.");
        }
        const attr = new Attribute(name, attribute, this);
        this.attributes.set(attr.name, attr);
        if (this.isDefaultComponent) {
            this.node.addAttribute(attr);
        }
        if (this.isDefaultComponent) {
            attr.resolveDefaultValue(NodeUtility.getAttributes(this.node.element));
        }
        else {
            const attrs = NodeUtility.getAttributes(this.element);
            attr.resolveDefaultValue(attrs);
        }
        this._additionalAttributesNames.push(attr.name);
    }
    __removeAttributes(name) {
        if (name) {
            const index = this._additionalAttributesNames.findIndex(id => id.name === name);
            if (index < 0) {
                throw new Error("can not remove attributes :" + name);
            }
            const attrId = this._additionalAttributesNames[index];
            if (this.isDefaultComponent) {
                this.node.removeAttribute(this.attributes.get(attrId));
            }
            this.attributes.delete(attrId);
            this._additionalAttributesNames.splice(index, 1);
        }
        else {
            this._additionalAttributesNames.forEach(id => {
                this.__removeAttributes(id.name);
            });
        }
    }
}
export default Component;
//# sourceMappingURL=Component.js.map