import NSIdentity from "../Base/NSIdentity";
import GrimoireInterface from "../GrimoireInterface";
class NodeDeclaration {
    constructor(name, _defaultComponents, _defaultAttributes, inherits, _treeConstraints) {
        this.name = name;
        this._defaultComponents = _defaultComponents;
        this._defaultAttributes = _defaultAttributes;
        this.inherits = inherits;
        this._treeConstraints = _treeConstraints;
        if (!this.inherits && this.name.name.toUpperCase() !== "GRIMOIRENODEBASE") {
            this.inherits = new NSIdentity("GrimoireNodeBase");
        }
    }
    get defaultComponents() {
        if (!this._defaultComponentsActual) {
            this._resolveInherites();
        }
        return this._defaultComponentsActual;
    }
    get defaultAttributes() {
        if (!this._defaultAttributesActual) {
            this._resolveInherites();
        }
        return this._defaultAttributesActual;
    }
    get treeConstraints() {
        return this._treeConstraints;
    }
    _resolveInherites() {
        if (!this.inherits) {
            this._defaultComponentsActual = this._defaultComponents;
            this._defaultAttributesActual = this._defaultAttributes;
            return;
        }
        const inherits = GrimoireInterface.nodeDeclarations.get(this.inherits);
        const inheritedDefaultComponents = inherits.defaultComponents;
        const inheritedDefaultAttribute = inherits.defaultAttributes;
        this._defaultComponentsActual = inheritedDefaultComponents.clone().merge(this._defaultComponents);
        this._defaultAttributesActual = inheritedDefaultAttribute.clone().pushDictionary(this._defaultAttributes);
    }
}
export default NodeDeclaration;
//# sourceMappingURL=NodeDeclaration.js.map