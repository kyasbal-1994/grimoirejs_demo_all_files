class NodeUtility {
    /**
     * Get index of NodeList converted from index in Element
     * @param  {HTMLElement} targetElement Parent element of search target elements
     * @param  {number}      elementIndex  Index in element
     * @return {number}                    Index in NodeList
     */
    static getNodeListIndexByElementIndex(targetElement, elementIndex) {
        const nodeArray = Array.prototype.slice.call(targetElement.childNodes);
        const elementArray = nodeArray.filter((v) => {
            return v.nodeType === 1;
        });
        elementIndex = elementIndex < 0 ? elementArray.length + elementIndex : elementIndex;
        const index = nodeArray.indexOf(elementArray[elementIndex]);
        return index === -1 ? null : index;
    }
    static getAttributes(element) {
        const attributes = {};
        const domAttr = element.attributes;
        for (let i = 0; i < domAttr.length; i++) {
            const attrNode = domAttr.item(i);
            const name = attrNode.name;
            attributes[name] = attrNode.value;
        }
        return attributes;
    }
}
export default NodeUtility;
//# sourceMappingURL=NodeUtility.js.map